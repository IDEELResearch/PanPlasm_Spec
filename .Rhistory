pageLength = 20,
dom = 'Bfrtip',
buttons = c('csv')))
manigoldhits
DT::datatable(manigoldhits, extensions='Buttons',
options = list(
searching = T,
pageLength = 20,
dom = 'Bfrtip',
buttons = c('csv')))
manigoldhits %>%
dplyr::select(names, ampliconlength, species) %>%
DT::datatable(., extensions='Buttons',
options = list(
searching = T,
pageLength = 20,
dom = 'Bfrtip',
buttons = c('csv')))
ape::dist.dna(manigoldfasta_subset, model = "raw")
?as.dist
?dna.dist
?dist.dna
fastafinder <- function(fa, start, end, centerdist = 50){
ret <- fa[start:end]
## really hate this
mid <- length(ret)/2
ret <- ret[(mid-centerdist):(mid+centerdist)]
return(ret)
}
manigoldfasta_subset <- p18sf[names(p18sf) %in% manigoldhits$names]
manigoldfasta_subset <- parallel::mcmapply(fastafinder, fa = as.list(manigoldfasta_subset), start =  manigoldhits$Fwends, end =  manigoldhits$Rvends)
manigoldfasta_subset
manigoldfasta_subset <- lapply(manigoldfasta_subset, ape::as.DNAbin)
ape::dist.dna(manigoldfasta_subset, model = "raw")
ape::dist.dna(manigoldfasta_subset, model = "raw")
ape::dist.dna(manigoldfasta_subset, model = "N")
rm(manigoldfasta_subset)
manigoldfasta_subset <- parallel::mcmapply(fastafinder, fa = as.list(manigoldfasta_subset), start =  manigoldhits$Fwends, end =  manigoldhits$Rvends)
manigoldfasta_subset <- p18sf[names(p18sf) %in% manigoldhits$names]
manigoldfasta_subset <- parallel::mcmapply(fastafinder, fa = as.list(manigoldfasta_subset), start =  manigoldhits$Fwends, end =  manigoldhits$Rvends)
manigoldfasta_subset
manigoldfasta_subset
library(stringdist)
stringdist::stringdist()
?stringdist
manigoldfasta_subset
manigoldfasta_subset %>% bind_rows()
manigoldfasta_subset %>% as.character %>% bind_rows
manigoldfasta_subset %>% as.character
manigoldfasta_subset
manigoldfasta_subset %>% as.character
manigoldfasta_subset <- lapply(manigoldfasta_subset, ape::as.DNAbin)
ape::dist.dna(manigoldfasta_subset, model = "N")
?dist.dna
ape::dist.dna(manigoldfasta_subset, model = "raw")
ape::dist.dna(manigoldfasta_subset, model = "raw", variance = T)
ape::dist.dna(manigoldfasta_subset, model = "TS", variance = T)
ape::dist.dna(manigoldfasta_subset, model = "K81", variance = T)
ape::dist.dna(manigoldfasta_subset, model = "TV", variance = T)
manigoldfasta_subset <- parallel::mcmapply(fastafinder, fa = as.list(manigoldfasta_subset), start =  manigoldhits$Fwends, end =  manigoldhits$Rvends)
manigoldfasta_subset
manigoldfasta_subset <- p18sf[names(p18sf) %in% manigoldhits$names]
manigoldfasta_subset <- parallel::mcmapply(fastafinder, fa = as.list(manigoldfasta_subset), start =  manigoldhits$Fwends, end =  manigoldhits$Rvends)
manigoldfasta_subset <- lapply(manigoldfasta_subset, as.character)
manigoldfasta_subset
manigoldfasta_subset <- manigoldfasta_subset %>% bind_rows()
manigoldfasta_subset
manigoldfasta_subset <- p18sf[names(p18sf) %in% manigoldhits$names]
manigoldfasta_subset <- parallel::mcmapply(fastafinder, fa = as.list(manigoldfasta_subset), start =  manigoldhits$Fwends, end =  manigoldhits$Rvends)
manigoldfasta_subset <- lapply(manigoldfasta_subset, as.character)
manigoldfasta_subset <-do.call("rbind.data.frame", manigoldfasta_subset)
manigoldfasta_subset
?stringDist
manigoldfasta_subset <- p18sf[names(p18sf) %in% manigoldhits$names]
manigoldfasta_subset <- parallel::mcmapply(fastafinder, fa = as.list(manigoldfasta_subset), start =  manigoldhits$Fwends, end =  manigoldhits$Rvends)
Biostrings::stringDist(manigoldfasta_subset)
manigoldfasta_subset
manigoldfasta_subset <- lapply(manigoldfasta_subset, Biostrings::DNAString)
Biostrings::stringDist(manigoldfasta_subset)
manigoldfasta_subset <- p18sf[names(p18sf) %in% manigoldhits$names]
manigoldfasta_subset <- parallel::mcmapply(fastafinder, fa = as.list(manigoldfasta_subset), start =  manigoldhits$Fwends, end =  manigoldhits$Rvends)
DNAStringSet(manigoldfasta_subset)
manigoldfasta_subset <- p18sf[names(p18sf) %in% manigoldhits$names]
manigoldfasta_subset <- parallel::mcmapply(fastafinder, fa = as.list(manigoldfasta_subset), start =  manigoldhits$Fwends, end =  manigoldhits$Rvends)
Biostrings::stringDist(DNAStringSet(manigoldfasta_subset))
fastafinder <- function(fa, start, end, centerdist = 50){
ret <- fa[start:end]
## really hate this
#  mid <- length(ret)/2
#  ret <- ret[(mid-centerdist):(mid+centerdist)]
return(ret)
}
manigoldfasta_subset <- p18sf[names(p18sf) %in% manigoldhits$names]
manigoldfasta_subset <- parallel::mcmapply(fastafinder, fa = as.list(manigoldfasta_subset), start =  manigoldhits$Fwends, end =  manigoldhits$Rvends)
Biostrings::stringDist(DNAStringSet(manigoldfasta_subset))
?stringDist
Biostrings::stringDist(DNAStringSet(manigoldfasta_subset), method = "hamming")
Biostrings::stringDist(DNAStringSet(manigoldfasta_subset), method = "levenshtein")
fastringdist <- Biostrings::stringDist(DNAStringSet(manigoldfasta_subset), method = "levenshtein")
fastringdist <- Biostrings::stringDist(DNAStringSet(manigoldfasta_subset), method = "levenshtein")
class*fastringdist
class(fastringdist)
fit <- cmdscale(fastringdist,eig=TRUE, k=3) # k is the number of dim
eigpoints <- as.data.frame(fit$points)
colnames(eigpoints) <- c("PC1", "PC2", "PC3")
colorsample <- data.frame(species = manigoldhits$species,
colorsample = sample(col_vector,length(manigoldhits$species)))
# color scheme
library(RColorBrewer) #https://stackoverflow.com/questions/15282580/how-to-generate-a-number-of-most-distinctive-colors-in-r
n <- 28
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
colorsample <- data.frame(species = manigoldhits$species,
colorsample = sample(col_vector,length(manigoldhits$species)))
colorsample <- data.frame(species = manigoldhits$species,
names = manigoldhits$names,
colorsample = sample(col_vector,length(manigoldhits$species)))
eigpoints <- left_join(eigpoints, colorsample, by=c("names"))
igpoints <- as.data.frame(fit$points)
colnames(eigpoints) <- c("PC1", "PC2", "PC3")
# color scheme
library(RColorBrewer) #https://stackoverflow.com/questions/15282580/how-to-generate-a-number-of-most-distinctive-colors-in-r
n <- 28
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
colorsample <- data.frame(species = manigoldhits$species,
names = manigoldhits$names,
colorsample = sample(col_vector,length(manigoldhits$species)))
eigpoints$names <-anigoldhits$names
eigpoints <- left_join(eigpoints, colorsample, by=c("names"))
colorsample <- data.frame(species = manigoldhits$species,
names = manigoldhits$names,
colorsample = sample(col_vector,length(manigoldhits$species)))
colorsample
eigpoints$names <- manigoldhits$names
eigpoints <- left_join(eigpoints, colorsample, by=c("names"))
eigpoints
# PCA
library(plotly)
Sys.setenv("plotly_username"="nbrazeau1")
Sys.setenv("plotly_api_key"="ePqTRUO0K7qUlYc8DffD")
eigpoints$names <- factor(manigoldhits$names)
eigpoints <- left_join(eigpoints, colorsample, by=c("names"))
psample <- plot_ly(eigpoints, x = ~PC1, y = ~PC3, z = ~PC2, color = ~species, colors = as.character(eigpoints$colorsample),
text = ~paste('Names: ', eigpoints$names)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC3'),
zaxis = list(title = 'PC2')))
psample
eigpoints$names
psample <- plot_ly(eigpoints, x = ~PC1, y = ~PC3, z = ~PC2, color = ~species, colors = as.character(eigpoints$colorsample),
text = ~paste('Names: ', as.character(eigpoints$names))) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC3'),
zaxis = list(title = 'PC2')))
psample
plot_ly(eigpoints, x = ~PC1, y = ~PC3, z = ~PC2, color = ~species, colors = as.character(eigpoints$colorsample)
)
psample <- plot_ly(eigpoints, x = ~PC1, y = ~PC3, z = ~PC2) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC3'),
zaxis = list(title = 'PC2')))
psample
# color scheme
library(RColorBrewer)
RColorBrewer::brewer.pal()
RColorBrewer::brewer.pal
?RColorBrewer
?brewer.pal
display.brewer.pal()
display.brewer.pal()
display.brewer.all()
data.frame(species = c("falciparum", "vivax", "malariae", "ovale", "knowlesi", "other"),
color = RColorBrewer::brewer.pal(6, "Dark2"))
colorsample <- data.frame(species = c("falciparum", "vivax", "malariae", "ovale", "knowlesi", "other"),
color = RColorBrewer::brewer.pal(6, "Dark2"))
manigoldfasta_subset <- p18sf[names(p18sf) %in% manigoldhits$names]
manigoldfasta_subset <- parallel::mcmapply(fastafinder, fa = as.list(manigoldfasta_subset), start =  manigoldhits$Fwends, end =  manigoldhits$Rvends)
fastringdist <- Biostrings::stringDist(DNAStringSet(manigoldfasta_subset), method = "levenshtein")
fit <- cmdscale(fastringdist,eig=TRUE, k=3) # k is the number of dim
eigpoints <- as.data.frame(fit$points)
colnames(eigpoints) <- c("PC1", "PC2", "PC3")
# color scheme
colorsample <- data.frame(species = c("falciparum", "vivax", "malariae", "ovale", "knowlesi", "other"),
color = RColorBrewer::brewer.pal(6, "Dark2"))
eigpoints$names <- factor(manigoldhits$names)
eigpoints <- left_join(eigpoints, colorsample, by=c("names"))
eigpoints <- left_join(eigpoints, colorsample, by=c("species"))
eigpoints$names <- factor(manigoldhits$names)
eigpoints$species <- factor(manigoldhits$species)
eigpoints <- left_join(eigpoints, colorsample, by=c("species"))
psample <- plot_ly(eigpoints, x = ~PC1, y = ~PC3, z = ~PC2, color = ~species, colors = as.character(colorsample$color)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC3'),
zaxis = list(title = 'PC2')))
psample
psample <- plot_ly(eigpoints, x = ~PC1, y = ~PC3, z = ~PC2, color = ~species, colors = as.character(colorsample$color),
text = ~paste('Name of Hit: ', eigpoints$names)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC3'),
zaxis = list(title = 'PC2')))
psample
eigpoints$names
?formatC
xx  <- pi * 10^(-5:4)
x <- xx[1]
x
prettyNum(1000)
prettyNum(1000, big.mark = ",")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: packages
# datawrangle
library(tidyverse)
library(stringr)
library(DT)
library(parallel)
# Genomics
library(rentrez)
library(Biostrings)
library(ape)
# plotting
library(RColorBrewer)
library(plotly)
speciesnamefinder <- function(ncbiname){
ncbiname <- tolower(ncbiname)
ncbiname <- unlist(str_split(ncbiname, pattern=" "))
tfret <- c("falciparum", "vivax", "malariae", "ovale", "knowlesi") %in% ncbiname
if(any(tfret == TRUE)){
ret <- c("falciparum", "vivax", "malariae", "ovale", "knowlesi")[tfret]
} else {
ret <- "other"
}
return(ret)
}
fastafinder <- function(fa, start, end, centerdist = 50){
ret <- fa[start:end]
## really hate this
#  mid <- length(ret)/2
#  ret <- ret[(mid-centerdist):(mid+centerdist)]
return(ret)
}
# Chunk 3
primers <- Biostrings::readDNAStringSet(filepath = "PrimerQueries.fasta")
manigoldfw <- primers[[1]]
manigoldrv <- Biostrings::reverseComplement(primers[[2]])
lefterovafw <- primers[[3]]
lefterovarv <- Biostrings::reverseComplement(primers[[4]])
# Chunk 4
query <- "plasmodium[ORGN] OR Plasmodium[ORGN]  AND (18S OR 18s OR 18S ribosomal RNA)"
panPlas18S.search <- rentrez::entrez_search(db= "nucleotide", query,
retmax = 1e4,
use_history = T)
# need to mkdir for a temp to write fasta out to in order to parse -- too much coercion otherwise from text to DNAstringset
if(!dir.exists("temp")){
dir.create("temp")
}
fasta_mtdt_fetch <- function(id){
f <- rentrez::entrez_fetch(db="nucleotide", rettype="fasta", id = id)
m <- rentrez::entrez_summary(db="nucleotide", id = id)
ret <- list(fasta = f,
metadata = m)
return(ret)
}
# fetch
p18sdt <- parallel::mclapply(panPlas18S.search$ids, fasta_mtdt_fetch)
# parse
p18smtdt <- purrr::map(p18sdt, `[[`, "metadata")
# parse
p18smtdt <- purrr::map(p18sdt, `[[`, "metadata")
p18smtdt <- purrr::map_df(p18smtdt, `[`, c("organism", "strain", "slen"))
outfastas <- purrr::map(p18sdt, `[[`, "fasta")
write.table(x=outfastas, file="temp/outfasta.fasta", quote = F, col.names = F, row.names = F, sep = "")
p18sf <- Biostrings::readDNAStringSet(filepath = "temp/outfasta.fasta", format = "fasta")
# drop sequences with very small lengths
p18sf <- p18sf[p18sf@ranges@width >= 100]
p18smtdt <- p18smtdt[p18smtdt$slen >= 100, ]
# make a link here
p18smtdt$names <- names(p18sf)
prettyNum(length(p18smtdt$names), big.mark = ",")
length(panPlas18S.search$ids)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: packages
# datawrangle
library(tidyverse)
library(stringr)
library(DT)
library(parallel)
# Genomics
library(rentrez)
library(Biostrings)
library(ape)
# plotting
library(RColorBrewer)
library(plotly)
speciesnamefinder <- function(ncbiname){
ncbiname <- tolower(ncbiname)
ncbiname <- unlist(str_split(ncbiname, pattern=" "))
tfret <- c("falciparum", "vivax", "malariae", "ovale", "knowlesi") %in% ncbiname
if(any(tfret == TRUE)){
ret <- c("falciparum", "vivax", "malariae", "ovale", "knowlesi")[tfret]
} else {
ret <- "other"
}
return(ret)
}
fastafinder <- function(fa, start, end, centerdist = 50){
ret <- fa[start:end]
## really hate this
#  mid <- length(ret)/2
#  ret <- ret[(mid-centerdist):(mid+centerdist)]
return(ret)
}
# Chunk 3
primers <- Biostrings::readDNAStringSet(filepath = "PrimerQueries.fasta")
manigoldfw <- primers[[1]]
manigoldrv <- Biostrings::reverseComplement(primers[[2]])
lefterovafw <- primers[[3]]
lefterovarv <- Biostrings::reverseComplement(primers[[4]])
# Chunk 4
query <- "plasmodium[ORGN] OR Plasmodium[ORGN]  AND (18S OR 18s OR 18S ribosomal RNA)"
panPlas18S.search <- rentrez::entrez_search(db= "nucleotide", query,
retmax = 1e4,
use_history = T)
panPlas18S.search$ids
fasta_mtdt_fetch <- function(id){
f <- rentrez::entrez_fetch(db="nucleotide", rettype="fasta", id = id)
m <- rentrez::entrez_summary(db="nucleotide", id = id)
ret <- list(fasta = f,
metadata = m)
return(ret)
}
fasta_mtdt_fetch <- function(id){
f <- rentrez::entrez_fetch(db="nucleotide", rettype="fasta", id = id)
m <- rentrez::entrez_summary(db="nucleotide", id = id)
ret <- list(fasta = f,
metadata = m)
return(ret)
}
# fetch
p18sdt <- parallel::mclapply(panPlas18S.search$ids, fasta_mtdt_fetch)
# parse
p18smtdt <- purrr::map(p18sdt, `[[`, "metadata")
p18smtdt <- purrr::map_df(p18smtdt, `[`, c("organism", "strain", "slen"))
outfastas <- purrr::map(p18sdt, `[[`, "fasta")
write.table(x=outfastas, file="temp/outfasta.fasta", quote = F, col.names = F, row.names = F, sep = "")
p18sf <- Biostrings::readDNAStringSet(filepath = "temp/outfasta.fasta", format = "fasta")
# drop sequences with very small lengths
p18sf <- p18sf[p18sf@ranges@width >= 100]
p18smtdt <- p18smtdt[p18smtdt$slen >= 100, ]
# make a link here
p18smtdt$names <- names(p18sf)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: packages
# datawrangle
library(tidyverse)
library(stringr)
library(DT)
library(parallel)
# Genomics
library(rentrez)
library(Biostrings)
library(ape)
# plotting
library(RColorBrewer)
library(plotly)
speciesnamefinder <- function(ncbiname){
ncbiname <- tolower(ncbiname)
ncbiname <- unlist(str_split(ncbiname, pattern=" "))
tfret <- c("falciparum", "vivax", "malariae", "ovale", "knowlesi") %in% ncbiname
if(any(tfret == TRUE)){
ret <- c("falciparum", "vivax", "malariae", "ovale", "knowlesi")[tfret]
} else {
ret <- "other"
}
return(ret)
}
fastafinder <- function(fa, start, end, centerdist = 50){
ret <- fa[start:end]
## really hate this
#  mid <- length(ret)/2
#  ret <- ret[(mid-centerdist):(mid+centerdist)]
return(ret)
}
# Chunk 3
primers <- Biostrings::readDNAStringSet(filepath = "PrimerQueries.fasta")
manigoldfw <- primers[[1]]
manigoldrv <- Biostrings::reverseComplement(primers[[2]])
lefterovafw <- primers[[3]]
lefterovarv <- Biostrings::reverseComplement(primers[[4]])
# Chunk 4
query <- "plasmodium[ORGN] OR Plasmodium[ORGN]  AND (18S OR 18s OR 18S ribosomal RNA)"
panPlas18S.search <- rentrez::entrez_search(db= "nucleotide", query,
retmax = 1e4,
use_history = T)
# Chunk 5
fasta_mtdt_fetch <- function(id){
f <- rentrez::entrez_fetch(db="nucleotide", rettype="fasta", id = id)
m <- rentrez::entrez_summary(db="nucleotide", id = id)
ret <- list(fasta = f,
metadata = m)
return(ret)
}
# fetch
p18sdt <- parallel::mclapply(panPlas18S.search$ids, fasta_mtdt_fetch)
# parse
p18smtdt <- purrr::map(p18sdt, `[[`, "metadata")
p18smtdt <- purrr::map_df(p18smtdt, `[`, c("organism", "strain", "slen"))
outfastas <- purrr::map(p18sdt, `[[`, "fasta")
write.table(x=outfastas, file="temp/outfasta.fasta", quote = F, col.names = F, row.names = F, sep = "")
p18sf <- Biostrings::readDNAStringSet(filepath = "temp/outfasta.fasta", format = "fasta")
# drop sequences with very small lengths
p18sf <- p18sf[p18sf@ranges@width >= 100]
p18smtdt <- p18smtdt[p18smtdt$slen >= 100, ]
# make a link here
p18smtdt$names <- names(p18sf)
# Chunk 6
manigoldhits <- lapply(list(manigoldfw, manigoldrv), function(x) {
Biostrings::vmatchPattern(as.character(x), p18sf, max.mismatch = 1) # I am allowing one mismatch
})
manigoldhits_Fw <- Biostrings::vmatchPattern(as.character(manigoldfw), p18sf)
manigoldhits_Fw <- manigoldhits_Fw[ !sapply(manigoldhits_Fw@ends, is.null) ] # drop non-hits
manigoldhits_Rv <- Biostrings::vmatchPattern(as.character(manigoldrv), p18sf)
manigoldhits_Rv <- manigoldhits_Rv[ !sapply(manigoldhits_Rv@ends, is.null) ] # drop non-hits
manigoldhits_Fw_tbl <- tibble(names = manigoldhits_Fw@NAMES,
Fwends = unlist(manigoldhits_Fw@ends),
Fwwidth = manigoldhits_Fw@width0)
manigoldhits_Rv_tbl <- tibble(names = manigoldhits_Rv@NAMES,
Rvends = unlist(manigoldhits_Rv@ends),
Rvwidth = manigoldhits_Rv@width0)
manigoldhits <- dplyr::inner_join(manigoldhits_Fw_tbl, manigoldhits_Rv_tbl, by=c("names"))
manigoldhits <- manigoldhits %>%
dplyr::mutate(ampliconlength = Rvends - Fwends + 1) %>%
dplyr::left_join(x=., y=p18smtdt, by = c("names")) %>%
dplyr::mutate(species = sapply(organism, speciesnamefinder))
# Chunk 7
manigoldhits %>%
dplyr::select(names, ampliconlength, species) %>%
DT::datatable(., extensions='Buttons',
options = list(
searching = T,
pageLength = 20,
dom = 'Bfrtip',
buttons = c('csv')))
# Chunk 8
summanigoldhits <- manigoldhits %>%
dplyr::group_by(species) %>%
dplyr::summarise(n=n(), avg_ampliconlength = mean(ampliconlength), sd_ampliconlength = sd(ampliconlength)) %>%
dplyr::mutate_if(is.numeric, round, 2)
DT::datatable(summanigoldhits, extensions='Buttons',
options = list(
searching = T,
pageLength = 20,
dom = 'Bfrtip',
buttons = c('csv')))
manigoldhits <- dplyr::inner_join(manigoldhits_Fw_tbl, manigoldhits_Rv_tbl, by=c("names"))
manigoldhits <- manigoldhits %>%
dplyr::mutate(ampliconlength = Rvends - Fwends + 1) %>%
dplyr::left_join(x=., y=p18smtdt, by = c("names")) %>%
dplyr::mutate(species = sapply(organism, speciesnamefinder))
# parse
p18smtdt <- purrr::map(p18sdt, `[[`, "metadata")
p18sdt
?entrez_fetch
Sys.sleep(30)
?Sys.sleep
lefterovahits <- lapply(list(lefterovafw, lefterovarv), function(x) {
Biostrings::vmatchPattern(as.character(x), p18sf, max.mismatch = 1) # I am allowing one mismatch
})
lefterovahits_Fw <- Biostrings::vmatchPattern(as.character(lefterovafw), p18sf)
lefterovahits_Fw <- lefterovahits_Fw[ !sapply(lefterovahits_Fw@ends, is.null) ] # drop non-hits
lefterovahits_Rv <- Biostrings::vmatchPattern(as.character(lefterovarv), p18sf)
lefterovahits_Rv <- lefterovahits_Rv[ !sapply(lefterovahits_Rv@ends, is.null) ] # drop non-hits
lefterovahits_Fw_tbl <- tibble(names = lefterovahits_Fw@NAMES,
Fwends = unlist(lefterovahits_Fw@ends),
Fwwidth = lefterovahits_Fw@width0)
lefterovahits_Fw@width0
lefterovahits_Fw@NAMES
lefterovahits_Fw@ends
lefterovahits_Fw@ends[,1]
lefterovahits_Fw@ends[1,]
purrr::map(lefterovahits_Rv@ends, `[[`)
purrr::map(lefterovahits_Rv@ends, `[`)
purrr::map(lefterovahits_Rv@ends, `[`)
lefterovahits_Rv@ends
lefterovahits_Rv@ends
unlist(lefterovahits_Rv@ends)
lefterovahits_Rv@NAMES
unlist(lefterovahits_Rv@ends)
?map
map(lefterovahits_Fw, length)
map(lefterovahits_Fw@ends, length)
which(unlist(map(lefterovahits_Fw@ends, length)) == 1)
lefterovahits_Fw_tbl <- tibble(names = lefterovahits_Fw@NAMES[which(unlist(map(lefterovahits_Fw@ends, length)) == 1)],
Fwends = unlist(lefterovahits_Fw@ends[which(unlist(map(lefterovahits_Fw@ends, length)) == 1)]),
Fwwidth = lefterovahits_Fw@width0[which(unlist(map(lefterovahits_Fw@ends, length)) == 1)])
lefterovahits_Rv_tbl <- tibble(names = lefterovahits_Rv@NAMES,
Rvends = unlist(lefterovahits_Rv@ends),
Rvwidth = lefterovahits_Rv@width0)
lefterovahits <- dplyr::inner_join(lefterovahits_Fw_tbl, lefterovahits_Rv_tbl, by=c("names"))
lefterovahits <- lefterovahits %>%
dplyr::mutate(ampliconlength = Rvends - Fwends + 1) %>%
dplyr::left_join(x=., y=p18smtdt, by = c("names")) %>%
dplyr::mutate(species = sapply(organism, speciesnamefinder))
p18smtdt
